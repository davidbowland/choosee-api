AWSTemplateFormatVersion: 2010-09-09
Description: >-
  API for choosee project

Transform:
  - AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Type: String
    Default: prod
    AllowedValues:
      - prod
      - test
    Description: Environment for deploy
  GoogleApiKey:
    Type: String
    Description: API key for Google Maps API
  RecaptchaSecretKey:
    Type: String
    Description: Secret key for reCAPTCHA v3
  SmsApiKey:
    Type: String
    Description: API key for sms-queue-api

Mappings:
  EnvironmentMap:
    prod:
      certificateEdge: adce1a21-90b4-4120-8548-111215e582f0
      certificateRegional: 5d4db894-c9fc-42ca-8f80-3c5da6c1678e
      choicesTable: choosee-api-choices
      corsDomain: https://choosee.dbowland.com
      decisionTable: choosee-api-decisions
      domain: choosee-api.dbowland.com
      domainInternal: choosee-api-internal.dbowland.com
      logStreamFunction: log-subscriber
      sessionTable: choosee-api-sessions
      smsApiUrl: https://sms-queue-api.dbowland.com/v1
      userPool: us-east-2_HTQbsxXaj
      userPoolClient: gd98upqar0ovh3bktvno6dng9
      zoneId: Z072422417XWM8PIXXSFA
    test:
      certificateEdge: 6a48cba7-feb9-4de5-8cbf-d383140fcdef
      certificateRegional: 14a32175-0c26-4768-b71f-3fa611b8f5a2
      choicesTable: choosee-api-choices-test
      corsDomain: https://choosee.bowland.link
      decisionTable: choosee-api-decisions-test
      domain: choosee-api.bowland.link
      domainInternal: choosee-api-internal.bowland.link
      logStreamFunction: log-subscriber-test
      sessionTable: choosee-api-sessions-test
      smsApiUrl: https://sms-queue-api.bowland.link/v1
      userPool: us-east-2_xqxzyIOz4
      userPoolClient: 135qlssf7st66v1vl5dtopfeks
      zoneId: Z01312547RGU1BYKIJXY

Resources:
  # API Gateway

  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: v1
      Auth:
        ApiKeyRequired: true # sets for all methods
        UsagePlan:
          CreateUsagePlan: PER_API
          Description: Usage plan for choosee-api
      Domain:
        DomainName: !FindInMap [EnvironmentMap, !Ref Environment, domainInternal]
        CertificateArn: !Sub
          - 'arn:aws:acm:us-east-1:${AWS::AccountId}:certificate/${Certificate}'
          - Certificate: !FindInMap [EnvironmentMap, !Ref Environment, certificateEdge]
        EndpointConfiguration: EDGE
        Route53:
          HostedZoneId: !FindInMap [EnvironmentMap, !Ref Environment, zoneId]
        BasePath:
          - /v1

  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Auth:
        Authorizers:
          CognitoAuthorizer:
            IdentitySource: $request.header.Authorization
            JwtConfiguration:
              issuer: !Sub
                - 'https://cognito-idp.us-east-2.amazonaws.com/${UserPool}'
                - UserPool: !FindInMap [EnvironmentMap, !Ref Environment, userPool]
              audience:
                - !FindInMap [EnvironmentMap, !Ref Environment, userPoolClient]
        DefaultAuthorizer: CognitoAuthorizer
      CorsConfiguration:
        AllowCredentials: true
        AllowHeaders:
          - Authorization
          - Content-Type
          - X-Amz-Date
          - X-Amz-Security-Token
          - X-Api-Key
          - X-Recaptcha-Token
        AllowMethods:
          - DELETE
          - GET
          - OPTIONS
          - PATCH
          - POST
          - PUT
        AllowOrigins:
          - !FindInMap [EnvironmentMap, !Ref Environment, corsDomain]
      Domain:
        BasePath:
          - /v1
        CertificateArn: !Sub
          - 'arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/${Certificate}'
          - Certificate: !FindInMap [EnvironmentMap, !Ref Environment, certificateRegional]
        DomainName: !FindInMap [EnvironmentMap, !Ref Environment, domain]
        EndpointConfiguration: REGIONAL
      FailOnWarnings: true
      StageName: v1

  # SAM won't create two Route53 records, so the HttpApi domain name is created separately
  HttpRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !Sub '${HttpApi.DomainName.RegionalDomainName}'
        HostedZoneId: !Sub '${HttpApi.DomainName.RegionalHostedZoneId}'
      HostedZoneId: !FindInMap [EnvironmentMap, !Ref Environment, zoneId]
      Name: !FindInMap [EnvironmentMap, !Ref Environment, domain]
      Type: A

  # Lambda

  DeleteSessionFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/delete-session.deleteByIdHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      MemorySize: 1536
      Description: choosee-api delete by ID
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionsTable
      Environment:
        Variables:
          DYNAMODB_SESSIONS_TABLE_NAME: !Ref SessionsTable
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /sessions/{sessionId}
            Method: delete
            Auth:
              ApiKeyRequired: true
      Tags:
        'created-by': 'choosee-api'
        'created-for': 'choosee'
        'environment': !Ref Environment
      Timeout: 10
      Tracing: Active
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - src/handlers/delete-session.ts

  DeleteSessionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${DeleteSessionFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'choosee-api'
        - Key: 'created-for'
          Value: 'choosee'
        - Key: 'environment'
          Value: !Ref Environment

  DeleteSessionLogGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref DeleteSessionLogGroup

  GetAllSessionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-all-sessions.getAllItemsHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      MemorySize: 1536
      Description: choosee-api get all items
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBReadPolicy:
            TableName: !Ref SessionsTable
      Environment:
        Variables:
          DYNAMODB_SESSIONS_TABLE_NAME: !Ref SessionsTable
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /sessions
            Method: get
            Auth:
              ApiKeyRequired: true
      Tags:
        'created-by': 'choosee-api'
        'created-for': 'choosee'
        'environment': !Ref Environment
      Timeout: 30
      Tracing: Active
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - src/handlers/get-all-sessions.ts

  GetAllSessionsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetAllSessionsFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'choosee-api'
        - Key: 'created-for'
          Value: 'choosee'
        - Key: 'environment'
          Value: !Ref Environment

  GetAllSessionsLogGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref GetAllSessionsLogGroup

  GetSessionByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-session-by-id.getByIdHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      MemorySize: 1536
      Description: choosee-api get by ID
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBReadPolicy:
            TableName: !Ref SessionsTable
      Environment:
        Variables:
          DYNAMODB_SESSIONS_TABLE_NAME: !Ref SessionsTable
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /sessions/{sessionId}
            Method: get
            Auth:
              ApiKeyRequired: true
        Http:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /sessions/{sessionId}
            Method: get
            Auth:
              Authorizer: NONE
      Tags:
        'created-by': 'choosee-api'
        'created-for': 'choosee'
        'environment': !Ref Environment
      Timeout: 10
      Tracing: Active
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - src/handlers/get-session-by-id.ts

  GetSessionByIdLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetSessionByIdFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'choosee-api'
        - Key: 'created-for'
          Value: 'choosee'
        - Key: 'environment'
          Value: !Ref Environment

  GetSessionByIdLogGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref GetSessionByIdLogGroup

  GetDecisionsByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-decisions-by-id.getDecisionsByIdHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      MemorySize: 1536
      Description: choosee-api get decisions by ID
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBReadPolicy:
            TableName: !Ref DecisionsTable
      Environment:
        Variables:
          DYNAMODB_DECISIONS_TABLE_NAME: !Ref DecisionsTable
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /sessions/{sessionId}/decisions/{userId}
            Method: get
            Auth:
              ApiKeyRequired: true
        Http:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /sessions/{sessionId}/decisions/{userId}
            Method: get
            Auth:
              Authorizer: NONE
      Tags:
        'created-by': 'choosee-api'
        'created-for': 'choosee'
        'environment': !Ref Environment
      Timeout: 10
      Tracing: Active
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - src/handlers/get-decisions-by-id.ts

  GetDecisionsByIdLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetDecisionsByIdFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'choosee-api'
        - Key: 'created-for'
          Value: 'choosee'
        - Key: 'environment'
          Value: !Ref Environment

  GetDecisionsByIdLogGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref GetDecisionsByIdLogGroup

  PatchSessionFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/patch-session.patchItemHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      MemorySize: 512
      Description: choosee-api patch item
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionsTable
      Environment:
        Variables:
          DYNAMODB_SESSIONS_TABLE_NAME: !Ref SessionsTable
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /sessions/{sessionId}
            Method: patch
            Auth:
              ApiKeyRequired: true
        Http:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /sessions/{sessionId}
            Method: patch
            Auth:
              Authorizer: CognitoAuthorizer
      Tags:
        'created-by': 'choosee-api'
        'created-for': 'choosee'
        'environment': !Ref Environment
      Timeout: 15
      Tracing: Active
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - src/handlers/patch-session.ts

  PatchSessionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${PatchSessionFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'choosee-api'
        - Key: 'created-for'
          Value: 'choosee'
        - Key: 'environment'
          Value: !Ref Environment

  PatchSessionGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref PatchSessionLogGroup

  PatchDecisionFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/patch-decisions-by-id.patchDecisionByIdHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      MemorySize: 1536
      Description: choosee-api patch item
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref DecisionsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionsTable
      Environment:
        Variables:
          DYNAMODB_DECISIONS_TABLE_NAME: !Ref DecisionsTable
          DYNAMODB_SESSIONS_TABLE_NAME: !Ref SessionsTable
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /sessions/{sessionId}/decisions/{userId}
            Method: patch
            Auth:
              ApiKeyRequired: true
        Http:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /sessions/{sessionId}/decisions/{userId}
            Method: patch
            Auth:
              Authorizer: NONE
      Tags:
        'created-by': 'choosee-api'
        'created-for': 'choosee'
        'environment': !Ref Environment
      Timeout: 60
      Tracing: Active
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - src/handlers/patch-decisions-by-id.ts

  PatchDecisionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${PatchDecisionFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'choosee-api'
        - Key: 'created-for'
          Value: 'choosee'
        - Key: 'environment'
          Value: !Ref Environment

  PatchDecisionGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref PatchDecisionLogGroup

  PostSessionFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/post-session.postItemHandlerUnauthenticated
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      MemorySize: 512
      Description: choosee-api post item
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionsTable
      Environment:
        Variables:
          DYNAMODB_SESSIONS_TABLE_NAME: !Ref SessionsTable
          SESSION_ID_MIN_LENGTH: 3
          SESSION_ID_MAX_LENGTH: 4
          RECAPTCHA_SECRET_KEY: !Ref RecaptchaSecretKey
          SESSION_EXPIRE_HOURS: 24
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /sessions
            Method: post
            Auth:
              ApiKeyRequired: true
        Http:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /sessions
            Method: post
            Auth:
              Authorizer: NONE
      Tags:
        'created-by': 'choosee-api'
        'created-for': 'choosee'
        'environment': !Ref Environment
      Timeout: 90
      Tracing: Active
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - src/handlers/post-session.ts

  PostSessionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${PostSessionFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'choosee-api'
        - Key: 'created-for'
          Value: 'choosee'
        - Key: 'environment'
          Value: !Ref Environment

  PostSessionGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref PostSessionLogGroup

  PostSessionAuthedFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/post-session.postItemHandlerAuthenticated
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      MemorySize: 512
      Description: choosee-api post item
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionsTable
      Environment:
        Variables:
          DYNAMODB_SESSIONS_TABLE_NAME: !Ref SessionsTable
          SESSION_ID_MIN_LENGTH: 3
          SESSION_ID_MAX_LENGTH: 4
          SESSION_EXPIRE_HOURS: 24
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /sessions/authed
            Method: post
            Auth:
              ApiKeyRequired: true
        Http:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /sessions/authed
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
      Tags:
        'created-by': 'choosee-api'
        'created-for': 'choosee'
        'environment': !Ref Environment
      Timeout: 90
      Tracing: Active
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - src/handlers/post-session.ts

  PostSessionAuthedLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${PostSessionAuthedFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'choosee-api'
        - Key: 'created-for'
          Value: 'choosee'
        - Key: 'environment'
          Value: !Ref Environment

  PostSessionAuthedGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref PostSessionAuthedLogGroup

  PostSendTextFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/post-send-text.postSendTextHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      MemorySize: 1536
      Description: choosee-api post send text
      Policies:
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          CORS_DOMAIN: !FindInMap [EnvironmentMap, !Ref Environment, corsDomain]
          SMS_API_KEY: !Ref SmsApiKey
          SMS_API_URL: !FindInMap [EnvironmentMap, !Ref Environment, smsApiUrl]
          USER_POOL_ID: !FindInMap [EnvironmentMap, !Ref Environment, userPool]
      Events:
        Http:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /sessions/{sessionId}/send-text
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
      Tags:
        'created-by': 'choosee-api'
        'created-for': 'choosee'
        'environment': !Ref Environment
      Timeout: 10
      Tracing: Active
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - src/handlers/post-send-text.ts

  PostSendTextLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${PostSendTextFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'choosee-api'
        - Key: 'created-for'
          Value: 'choosee'
        - Key: 'environment'
          Value: !Ref Environment

  PostSendTextGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref PostSendTextLogGroup

  PostSendTextToFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/post-send-text-to.postSendTextToHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      MemorySize: 1536
      Description: choosee-api post send text to
      Policies:
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          CORS_DOMAIN: !FindInMap [EnvironmentMap, !Ref Environment, corsDomain]
          SMS_API_KEY: !Ref SmsApiKey
          SMS_API_URL: !FindInMap [EnvironmentMap, !Ref Environment, smsApiUrl]
          USER_POOL_ID: !FindInMap [EnvironmentMap, !Ref Environment, userPool]
      Events:
        Http:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /sessions/{sessionId}/send-text/{toUserId}
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
      Tags:
        'created-by': 'choosee-api'
        'created-for': 'choosee'
        'environment': !Ref Environment
      Timeout: 10
      Tracing: Active
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - src/handlers/post-send-text-to.ts

  PostSendTextToLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${PostSendTextToFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'choosee-api'
        - Key: 'created-for'
          Value: 'choosee'
        - Key: 'environment'
          Value: !Ref Environment

  PostSendTextToGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref PostSendTextToLogGroup

  PostUpdateStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/post-update-status.postUpdateStatus
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      MemorySize: 1536
      Description: choosee-api post update status
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionsTable
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /sessions/{sessionId}/update-status
            Method: post
            Auth:
              ApiKeyRequired: true
      Tags:
        'created-by': 'choosee-api'
        'created-for': 'choosee'
        'environment': !Ref Environment
      Timeout: 60
      Tracing: Active
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - src/handlers/post-update-status.ts

  PostUpdateStatusLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${PostUpdateStatusFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'choosee-api'
        - Key: 'created-for'
          Value: 'choosee'
        - Key: 'environment'
          Value: !Ref Environment

  PostUpdateStatusGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref PostUpdateStatusLogGroup

  # DynamoDB

  ChoicesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: ChoiceId
          AttributeType: S
        - AttributeName: Expiration
          AttributeType: N
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: ChoiceId
          KeyType: HASH
        - AttributeName: Expiration
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: Expiration
        Enabled: true
      TableName: !FindInMap [EnvironmentMap, !Ref Environment, choicesTable]
      Tags:
        - Key: 'created-by'
          Value: 'choosee-maps-api'
        - Key: 'created-for'
          Value: 'choosee'
        - Key: 'environment'
          Value: !Ref Environment

  DecisionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: SessionId
          AttributeType: S
        - AttributeName: UserId
          AttributeType: S
        - AttributeName: Expiration
          AttributeType: N
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: SessionId
          KeyType: HASH
        - AttributeName: UserId
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: Expiration
        Enabled: true
      TableName: !FindInMap [EnvironmentMap, !Ref Environment, decisionTable]
      Tags:
        - Key: 'created-by'
          Value: 'choosee-api'
        - Key: 'created-for'
          Value: 'choosee'
        - Key: 'environment'
          Value: !Ref Environment

  SessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: SessionId
          AttributeType: S
        - AttributeName: Expiration
          AttributeType: N
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: SessionId
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: Expiration
        Enabled: true
      TableName: !FindInMap [EnvironmentMap, !Ref Environment, sessionTable]
      Tags:
        - Key: 'created-by'
          Value: 'choosee-api'
        - Key: 'created-for'
          Value: 'choosee'
        - Key: 'environment'
          Value: !Ref Environment
